// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	user3 "github.com/silfoxs/silgo/internal/app/action/user"
	"github.com/silfoxs/silgo/internal/app/repository/user"
	"github.com/silfoxs/silgo/internal/app/router"
	user2 "github.com/silfoxs/silgo/internal/app/service/user"
	"github.com/silfoxs/silgo/internal/pkg/database"
	"github.com/silfoxs/silgo/internal/pkg/http"
	"github.com/silfoxs/silgo/internal/pkg/logger"
)

// Injectors from wire.go:

func BuildInjector() (*Injector, func(), error) {
	loggerLogger, cleanup, err := logger.New()
	if err != nil {
		return nil, nil, err
	}
	db, cleanup2, err := database.New()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userRepository := &user.UserRepository{
		Logger: loggerLogger,
		ReadDb: db,
	}
	userService := &user2.UserService{
		UserRepo: userRepository,
	}
	action := user3.Action{
		Logger:      loggerLogger,
		UserService: userService,
	}
	routerRouter := &router.Router{
		UserAction: action,
	}
	server, cleanup3, err := http.NewHttp(loggerLogger, routerRouter)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	injector := &Injector{
		Logger: loggerLogger,
		Server: server,
	}
	return injector, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
